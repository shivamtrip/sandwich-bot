// Generated by gencpp from file sandwich_robot/object_centers.msg
// DO NOT EDIT!


#ifndef SANDWICH_ROBOT_MESSAGE_OBJECT_CENTERS_H
#define SANDWICH_ROBOT_MESSAGE_OBJECT_CENTERS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sandwich_robot
{
template <class ContainerAllocator>
struct object_centers_
{
  typedef object_centers_<ContainerAllocator> Type;

  object_centers_()
    : header()
    , x_center()
    , y_center()
    , num_items(0)
    , status(false)  {
    }
  object_centers_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , x_center(_alloc)
    , y_center(_alloc)
    , num_items(0)
    , status(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _x_center_type;
  _x_center_type x_center;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _y_center_type;
  _y_center_type y_center;

   typedef int32_t _num_items_type;
  _num_items_type num_items;

   typedef uint8_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::sandwich_robot::object_centers_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sandwich_robot::object_centers_<ContainerAllocator> const> ConstPtr;

}; // struct object_centers_

typedef ::sandwich_robot::object_centers_<std::allocator<void> > object_centers;

typedef boost::shared_ptr< ::sandwich_robot::object_centers > object_centersPtr;
typedef boost::shared_ptr< ::sandwich_robot::object_centers const> object_centersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sandwich_robot::object_centers_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sandwich_robot::object_centers_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sandwich_robot::object_centers_<ContainerAllocator1> & lhs, const ::sandwich_robot::object_centers_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.x_center == rhs.x_center &&
    lhs.y_center == rhs.y_center &&
    lhs.num_items == rhs.num_items &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sandwich_robot::object_centers_<ContainerAllocator1> & lhs, const ::sandwich_robot::object_centers_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sandwich_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sandwich_robot::object_centers_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sandwich_robot::object_centers_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sandwich_robot::object_centers_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sandwich_robot::object_centers_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sandwich_robot::object_centers_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sandwich_robot::object_centers_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sandwich_robot::object_centers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d43144be60cdeb0179fa3adfa2875f25";
  }

  static const char* value(const ::sandwich_robot::object_centers_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd43144be60cdeb01ULL;
  static const uint64_t static_value2 = 0x79fa3adfa2875f25ULL;
};

template<class ContainerAllocator>
struct DataType< ::sandwich_robot::object_centers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sandwich_robot/object_centers";
  }

  static const char* value(const ::sandwich_robot::object_centers_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sandwich_robot::object_centers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32[] x_center\n"
"float32[] y_center\n"
"int32 num_items\n"
"bool status\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::sandwich_robot::object_centers_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sandwich_robot::object_centers_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.x_center);
      stream.next(m.y_center);
      stream.next(m.num_items);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct object_centers_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sandwich_robot::object_centers_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sandwich_robot::object_centers_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "x_center[]" << std::endl;
    for (size_t i = 0; i < v.x_center.size(); ++i)
    {
      s << indent << "  x_center[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x_center[i]);
    }
    s << indent << "y_center[]" << std::endl;
    for (size_t i = 0; i < v.y_center.size(); ++i)
    {
      s << indent << "  y_center[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y_center[i]);
    }
    s << indent << "num_items: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_items);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SANDWICH_ROBOT_MESSAGE_OBJECT_CENTERS_H
